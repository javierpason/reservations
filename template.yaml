AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  LoanPro Challenge Reservations

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  # Lambda Function triggered by DynamoDB Stream
  DynamoDBStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-reservations-dbstream
      CodeUri: src/dynamoDBstream/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ReservationsDBTable
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - dynamodb:GetShardIterator
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - events:PutEvents              
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents           
            Resource: '*'          
    MemorySize: 3008
    Timeout: 900
    Events:
      Stream:
        Type: DynamoDB
        Properties:
          Stream: !GetAtt ReservationsDBTable.StreamArn
          BatchSize: 10
          StartingPosition: TRIM_HORIZON
          MaximumRetryAttempts: 1
  
  # DynamoDB Table
  ReservationsDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "loanpro-reservations"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "reservation_id"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"          
      KeySchema:
        - AttributeName: "reservation_id"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"     
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt ReservationsDBTable.StreamArn
      FunctionName: !GetAtt DynamoDBStreamFunction.Arn
      StartingPosition: LATEST 

  # API Gateway
  ReservationsAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: ReservationsApi
      StageName: production
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Reservation Function Endpoints.
  ListReservationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-list-reservations
      CodeUri: src/reservations/list/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReservationsDBTable
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref ReservationsDBTable
      Architectures:
        - x86_64
      Events:
        ListReservation:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsAPIGateway
            Path: /reservations
            Method: get
          
  CreateReservationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-create-reservations
      CodeUri: src/reservations/create/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReservationsDBTable
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref ReservationsDBTable
      Architectures:
        - x86_64
      Events:       
        SaveReservation:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsAPIGateway
            Path: /reservations
            Method: post
       
  UpdateReservationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-update-reservations
      CodeUri: src/reservations/update/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReservationsDBTable
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref ReservationsDBTable
      Architectures:
      - x86_64
      Events: 
        UpdateReservation:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsAPIGateway
            Path: /reservations
            Method: patch 

  DeleteReservationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-delete-reservations
      CodeUri: src/reservations/delete/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReservationsDBTable
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref ReservationsDBTable
      Architectures:
      - x86_64
      Events: 
        UpdateReservation:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsAPIGateway
            Path: /reservations/{reservation_id}/{timestamp}
            Method: delete 

  GetReservationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-get-reservations
      CodeUri: src/reservations/get/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:            
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:GetItem
            Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref ReservationsDBTable
      Architectures:
      - x86_64
      Events: 
        UpdateReservation:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsAPIGateway
            Path: /reservations/{reservation_id}/{timestamp}
            Method: get 

  
  # SQS Section
  SQSQueueEventBridge:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: loanpro-reservation-requests.fifo
      ContentBasedDeduplication: true     
      FifoQueue: 'true'  
      VisibilityTimeout: 60   
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSQueueEventBridgeDLQ.Arn
        maxReceiveCount: 1

  SQSQueueEventBridgeDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: loanpro-reservation-requests-dlq.fifo
      ContentBasedDeduplication: true     
      FifoQueue: 'true'  
      VisibilityTimeout: 60   
      ReceiveMessageWaitTimeSeconds: 20

# EventBridge Rule.
  EventBridgeLoanProRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: loanpro-reservations-rule
      EventPattern:
        source: ["loanpro.reservation.service"]
      State: ENABLED
      Targets:
        - Id: queue-target
          Arn: !GetAtt SQSQueueEventBridge.Arn
          SqsParameters:
            MessageGroupId: messageGroupId
         

  SqsEventBridgePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action:
              - SQS:SendMessage
              - kms:Encrypt
              - kms:Decrypt
            Resource: !GetAtt SQSQueueEventBridge.Arn
      Queues:
        - !Ref SQSQueueEventBridge

  # Lambda will be link to EventBridge Rule
  SQSToSNSFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-reservation-to-sns
      CodeUri: src/sqstosns/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt SQSQueueEventBridge.Arn
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - sns:Publish           
            Resource: "*" 
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents           
            Resource: '*'
      Events:
        SQSToSNS:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueueEventBridge.Arn
            BatchSize: 10   

  SnsTopicFinanceBooking:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: loanpro-reservations    

  CreateSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: loanpro-create-subscription
      CodeUri: src/snsSubscription/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReservationsDBTable
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
              - sns:Subscribe                   
            Resource: '*'
      Environment:
        Variables:
          TOPIC_NAME: !Ref SnsTopicFinanceBooking
      Architectures:
        - x86_64
      Events:       
        SaveReservation:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsAPIGateway
            Path: /subscription
            Method: post

Outputs:
  ApiUrl:
    Description: "The URL of the API Gateway endpoint"
    Value: !Sub "https://${ReservationsAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/production/"